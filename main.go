package main

import (
	"flag"
	"fmt"
	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
	"io/ioutil"
	"log"
	"os"
)

var (
	// –≥–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è, –≤ –∫–æ—Ç–æ—Ä–æ–π —Ö—Ä–∞–Ω–∏–º —Ç–æ–∫–µ–Ω
	telegramBotToken    string
	openweathermapToken string

	skills = []Skill{
		{name: "—Ä–∞—Å—Å–∫–∞–∂–∏—Å—å", description: "–Ω—É –≤—ã —É–∂–µ –ø–æ–Ω—è–ª–∏ –∫–∞–∫ –æ–Ω–æ —Ä–∞–±–æ—Ç–∞–µ—Ç"},
		{name: "–ø–æ–∫–∞–∂–∏—Å—å", description: "—è–≤–ª—é—Å—å –∫ –≤–∞–º –≤–æ –≤—Å–µ–π —Å–≤–æ–µ–π –∫—Ä–∞—Å–µ"},
		{name: "–æ—Ç–≤–µ—Ç—å", description: "—Å –≤–∞—Å –≤–æ–ø—Ä–æ—Å —Å –º–µ–Ω—è –æ—Ç–≤–µ—Ç"},
		{name: "–ø–æ–≥–æ–¥–∞", description: "–≤—ã–≥–ª—è–Ω—É –≤ –æ–∫–Ω–æ –∑–∞ –≤–∞—Å"},
		{name: "–¥—É—Ä–∞–∫", description: "–¥–∞–∂–µ –Ω–µ –¥—É–º–∞–π"},
		{name: "—Å–ø–∞—Å–∏–±–æ", description: "–≤–µ–∂–ª–∏–≤–æ—Å—Ç—å —É –Ω–∞—Å –≤ –ø–æ—á—ë—Ç–µ"},
	}

	existingSkills = map[string]bool{
		"–ø–æ–∫–∞–∂–∏—Å—å": true,
		"–æ—Ç–≤–µ—Ç—å":   true,
		"–ø–æ–≥–æ–¥–∞":   true,
		"–¥—É—Ä–∞–∫":    true,
		"—Å–ø–∞—Å–∏–±–æ":  true,
	}

	chatovoyNames = map[string]bool{
		"—á—Ç–≤":              true,
		"—á–∞—Ç–æ–≤–æ–π":          true,
		"@chatovoybot":     true,
		"—Å–æ–ª–Ω—ã—à–∫–æ –∑–∞–∏–Ω—å–∫–∞": true,
	}
)

const (
	testChatId      = -790845206
	govnosoftChatId = -755317706
	balconyChatId   = -1001416816634

	numberOfKuzyasPictures = 7

	emptyLine = "\n\n"
	greetings = "–ü—Ä–∏–≤–µ—Ç, –º–µ–Ω—è –∑–æ–≤—É—Ç –ö—É–∑—å–∫–æ–π, –º–æ–∂–Ω–æ –ö—É–∑–µ–Ω—å–∫–æ–π. –Ø –º–∞–ª–µ–Ω—å–∫–∏–π –µ—â—ë, —Å–µ–º—å –≤–µ–∫–æ–≤ –≤—Å–µ–≥–æ, –≤–æ—Å—å–º–æ–π –ø–æ—à—ë–ª."
	cuteness  = "üò≥\U0001F97Aüò≥\U0001F97Aüò≥\U0001F97A"
)

func init() {
	// –º–µ–Ω—è–µ–º BOT_TOKEN –Ω–∞ —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –æ—Ç BotFather, –≤ —Å—Ç—Ä–æ–∫–µ –ø—Ä–∏–Ω–∏–º–∞–µ–º –Ω–∞ –≤—Ö–æ–¥–µ —Ñ–ª–∞–≥ -telegrambottoken
	flag.StringVar(&telegramBotToken, "telegrambottoken", "", "Telegram Bot Token")
	flag.StringVar(&openweathermapToken, "openweathermapToken", "", "OpenWeatherMap Token")
	flag.Parse()

	// –±–µ–∑ —Ñ–ª–∞–≥–∞ –Ω–µ –∑–∞–ø—É—Å–∫–∞–µ–º
	if telegramBotToken == "" {
		log.Print("-telegrambottoken is required")
		os.Exit(1)
	}
}

func main() {
	// –∏—Å–ø–æ–ª—å–∑—É—è —Ç–æ–∫–µ–Ω, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∏–Ω—Å—Ç–∞–Ω—Å –±–æ—Ç–∞
	bot, err := tgbotapi.NewBotAPI(telegramBotToken)
	if err != nil {
		log.Panic(err)
	}

	// –ø–∏—à–µ–º –æ–± —ç—Ç–æ–º –≤ –∫–æ–Ω—Å–æ–ª—å
	log.Printf("Authorized on account %s", bot.Self.UserName)

	// u - —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å –∫–æ–Ω—Ñ–∏–≥–æ–º –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–ø–¥–µ–π—Ç–æ–≤
	u := tgbotapi.NewUpdate(0)
	u.Timeout = 60

	// –∏—Å–ø–æ–ª—å–∑—É—è –∫–æ–Ω—Ñ–∏–≥, —Å–æ–∑–¥–∞–µ–º –∫–∞–Ω–∞–ª, –≤ –∫–æ—Ç–æ—Ä—ã–π –±—É–¥—É—Ç –ø—Ä–∏–ª–µ—Ç–∞—Ç—å –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
	updates := bot.GetUpdatesChan(u)

	// –≤ –∫–∞–Ω–∞–ª updates –ø—Ä–∏–ª–µ—Ç–∞—é—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ç–∏–ø–∞ Update, –≤—ã—á–∏—Ç—ã–≤–∞–µ–º –∏—Ö –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º
	for update := range updates {
		if update.Message == nil {
			continue
		}

		logUpdate(update)

		reply := ""
		if update.Message.IsCommand() {
			reply = processCommand(update)
		} else {
			reply = processMessage(update, bot)
		}

		sendMessage(bot, update.Message.Chat.ID, reply)
	}
}

func logUpdate(update tgbotapi.Update) {
	message := update.Message.Text
	userName := update.Message.From.UserName
	chatID := update.Message.Chat.ID
	chatTitle := update.Message.Chat.Title

	log.Printf("[%s] sent message: \"%s\" to chat: \"%s\"[%d]", userName, message, chatTitle, chatID)
}

func processCommand(update tgbotapi.Update) string {
	command := update.Message.Command()
	reply := ""

	switch command {
	case "start":
		reply = greetings
	case "currency":
		reply = getCurrency()
	case "time":
		reply = getTime()
	}
	return reply
}

func processMessage(update tgbotapi.Update, bot *tgbotapi.BotAPI) string {
	message := prepareMessage(update, bot)
	reply := ""

	if isMessageForBot(message) {
		switch message.skillName {
		case "—Ä–∞—Å—Å–∫–∞–∂–∏—Å—å":
			reply = introduceYourself()
		case "–ø–æ–∫–∞–∂–∏—Å—å":
			reply = showYourself(bot, message.fromChat)
		case "–æ—Ç–≤–µ—Ç—å":
			reply = getRandomAnswer()
		case "–ø–æ–≥–æ–¥–∞":
			reply = showWeather(message.skillParameter)
		case "–¥—É—Ä–∞–∫":
			reply = "–°–∞–º –¥—É—Ä–∞–∫."
		case "—Å–ø–∞—Å–∏–±–æ":
			reply = "–Ø –ø—Ä–æ—Å—Ç–æ –¥–µ–ª–∞—é —Å–≤–æ—é —Ä–∞–±–æ—Ç—É. –†–∞–±–æ—Ç–∞—Ç—å –±—É–¥—É –ø–æ —Å–æ–≤–µ—Å—Ç–∏. –ó–∞ —Ö–æ–∑—è–π—Å—Ç–≤–æ –Ω–µ –±–æ–π—Å—è. –ö–æ–Ω—é—à–Ω—è –µ—Å—Ç—å?"
		}
	}

	if message.botMention == "—Å–æ–ª–Ω—ã—à–∫–æ –∑–∞–∏–Ω—å–∫–∞" {
		reply += " " + cuteness
	}

	return reply
}

func sendMessage(bot *tgbotapi.BotAPI, chatID int64, message string) {
	msg := tgbotapi.NewMessage(chatID, message)
	bot.Send(msg)
}

func introduceYourself() string {
	skillsIntroduction := "–∞ –≤–æ—Ç —á—Ç–æ —è —É–º–µ—é:"

	skillsText := ""

	for _, elem := range skills {
		skillsText += fmt.Sprintf("%s -> %s\n", elem.name, elem.description)
	}

	return greetings + emptyLine + skillsIntroduction + emptyLine + skillsText
}

func showWeather(place string) string {
	return requestWeatherByPlace(place)
}

func showYourself(bot *tgbotapi.BotAPI, chatID int64) string {
	reply := "—Ç—É—Ç–æ—á–∫–∏ —è"

	photoName := generatePhotoName()
	photoBytes, err := ioutil.ReadFile(makePhotoPath(photoName))

	if err != nil {
		return "–û–π! –°—Ç–µ—Å–Ω—è—é—Å—å —è"
	} else {
		sendPhoto(bot, chatID, photoBytes, photoName)
		return reply
	}
}

func isMessageForBot(message PreparedMessage) bool {
	return chatovoyNames[message.botMention] || existingSkills[message.skillName] && message.isReplyForBotMessage
}
